[general]
pidfile="burrow.pid"
stdout-logfile="burrow.out"
access-control-allow-origin="mysite.example.com"

[logging]
filename="logs/burrow.log"
level="info"
maxsize=100
maxbackups=30
maxage=10
use-localtime=false
use-compression=true

[zookeeper]
servers=[ "zkhost01.example.com:2181", "zkhost02.example.com:2181", "zkhost03.example.com:2181" ]
timeout=6
root-path="/burrow"

[client-profile.test]
client-id="burrow-test"
kafka-version="0.10.0"

[cluster.local]
class-name="kafka"
servers=[ "kafka01.example.com:10251", "kafka02.example.com:10251", "kafka03.example.com:10251" ]
client-profile="test"
topic-refresh=120
offset-refresh=30

[consumer.local]
class-name="kafka"
cluster="local"
servers=[ "kafka01.example.com:10251", "kafka02.example.com:10251", "kafka03.example.com:10251" ]
client-profile="test"
group-blacklist="^(console-consumer-|python-kafka-consumer-|quick-).*$"
group-whitelist=""

[consumer.local_zk]
class-name="kafka_zk"
cluster="local"
servers=[ "zk01.example.com:2181", "zk02.example.com:2181", "zk03.example.com:2181" ]
zookeeper-path="/kafka-cluster"
zookeeper-timeout=30
group-blacklist="^(console-consumer-|python-kafka-consumer-|quick-).*$"
group-whitelist=""

[httpserver.default]
address=":8000"

[storage.default]
class-name="inmemory"
workers=20
intervals=15
expire-group=604800
min-distance=1

[notifier.default]
class-name="http"
url-open="http://someservice.example.com:1467/v1/event"
interval=60
timeout=5
keepalive=30
extras={ api_key="REDACTED", app="burrow", tier="STG", fabric="mydc" }
template-open="conf/default-http-post.tmpl"
template-close="conf/default-http-delete.tmpl"
method-close="DELETE"
send-close=true
threshold=1

[metrics.prometheus]
# Enable Prometheus metrics endpoint
enabled = false

# Enable the collection of the generic consumer group related metrics
metric-consumer-enabled = true
# Set the metric names for the consumer group measurements
metric-consumer-total-lag = "burrow_consumer_group_total_lag"
metric-consumer-partitions = "burrow_consumer_group_total_partitions"
metric-consumer-status = "burrow_consumer_group_status_code"
metric-consumer-max-lag = "burrow_consumer_group_max_lag"

# Enable the collection of the per-partition consumer group metrics
metric-partition-enabled = true
# Set the metric names for the per-partition consumer measurements
metric-partition-current-lag = "burrow_consumer_group_partition_current_lag"
metric-partition-status = "burrow_consumer_group_partition_status_code"
metric-partition-offset = "burrow_consumer_group_partition_latest_offset"

# Enable the collection of topic related metrics
metric-topic-enabled = true
# Set the metric names for the topic measurements
metric-topic-offset = "burrow_topic_partition_offset"

# Include only topics matching this regular expression
# Empty value means to inclusion of all topics
include-topics = ''
# Exclude topics matching this regular expression
# Empty value means no topics are excluded
exclude-topics = ''

# Include only consumer groups matching this regular expression
# Empty value means to inclusion of all consumer groups
include-consumers = ''
# Exclude consumer groups matching this regular expression
# Empty value means no consumer groups are excluded
exclude-consumers = ''

# Skip consumer groups which completeness is less then 100%
only-complete-consumers = false
# Skip partitions which completeness is less then 100%
only-complete-partitions = false
